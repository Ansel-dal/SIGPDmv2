@page "/cotizaciones"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Cotizaciones</h1>
<p>En esta sección se podrán crear cotizaciones.</p>
<button class="btn btn-outline-primary" @onclick="()=>add(0)">Agregar cotización</button>
<hr />

@if (oRespuesta.List != null)
{
    <RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Pendientes">
                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="5"
                            AllowPaging="true" ShowPagingSummary="true"
                            Data="@oRespuestaPendientes" TItem="Cotizacione" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="N° Cotizacion" Width="50px">
                            <Template Context="data">
                                <a>@($"C{data.Codigo}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Titulo" Title="Titulo" Width="70px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Cliente" Title="Cliente" Width="80px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Valorpeso" Title="Precio" Width="30px" Filterable="false" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Cantidad" Title="Cantidad" Width="50px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Editar cotizacion" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>

                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Aprobadas">
                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="5"
                            AllowPaging="true" ShowPagingSummary="true"
                            Data="@oRespuestaAprobadas" TItem="Cotizacione" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="N° Cotizacion" Width="50px">
                            <Template Context="data">
                                <a>@($"C{data.Codigo}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Titulo" Title="Titulo" Width="80px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Cliente" Title="Cliente" Width="80px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Valorpeso" Title="Precio" Width="30px" Filterable="false" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Cantidad" Title="Cantidad" Width="50px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Editar cotizacion" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Rechazadas">
                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="5"
                            AllowPaging="true" ShowPagingSummary="true"
                            Data="@oRespuestaRechazadas" TItem="Cotizacione" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="N° Cotizacion" Width="50px">
                            <Template Context="data">
                                <a>@($"C{data.Codigo}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Titulo" Title="Titulo" Width="80px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Cliente" Title="Cliente" Width="80px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Valorpeso" Title="Precio" Width="30px" Filterable="false" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Cantidad" Title="Cantidad" Width="50px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Editar cotizacion" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<List<Cotizacione>> oRespuesta = new();
    List<Cotizacione> oRespuestaPendientes;
    List<Cotizacione> oRespuestaAprobadas;
    List<Cotizacione> oRespuestaRechazadas;

    protected override async Task OnInitializedAsync()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<Cotizacione>>>("/api/Cotizacion");
        oRespuesta = respuesta;
        oRespuestaPendientes = oRespuesta.List.Where(x => x.Estado == "Cargado").ToList();
        oRespuestaAprobadas = oRespuesta.List.Where(x => x.Estado == "Aprobada").ToList();
        oRespuestaRechazadas = oRespuesta.List.Where(x => x.Estado == "Rechazada").ToList();

    }
    async Task ComeBack()
    {
        nav.NavigateTo("/ventas");
    }

    async Task add(int id)
    {
        if (id != 0)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(AddCotizacion.id), id);
            var options = new ModalOptions()
                {
                    Size = ModalSize.Large

                };
            var formModal = Modal.Show<AddCotizacion>("Editar Cotizacion", parameters, options);
            var result = await formModal.Result;
            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
            }
            else
            {
                await OnInitializedAsync();
            }

        }
        else
        {
            var options = new ModalOptions()
                {
                    Size = ModalSize.Large
                };
            var formModal = Modal.Show<AddCotizacion>("Agregar Cotizacion", options);
            var result = await formModal.Result;


            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
            }
            else
            {
                await OnInitializedAsync();
            }
        }
    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    async Task delete(int id)
    {
        await http.DeleteAsync($"/api/Cotizacion/{id}");
        await OnInitializedAsync();
        StateHasChanged();
    }

    async Task gotoinfo(int id)
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
            };
        parameters.Add(nameof(Info.id), id);
        var formModal = Modal.Show<Info>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await OnInitializedAsync();
        }
    }

}