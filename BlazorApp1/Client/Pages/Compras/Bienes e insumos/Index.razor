@page "/bienes"
@using BlazorApp1.Client.Pages.Deposito.Insumos
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Bienes e insumos</h1>
<p>En esta sección se podrán gestionar las solicitudes que llegan desde el pañol.</p>
<hr />
<RadzenTabs Class="w-100 my-5 mx-auto" RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Stock">
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="4"
                            AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@oRespuesta.List" TItem="Insumo" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="Insumo" Property="Descripcion" Title="Descripción" Width="100px" />
                    <RadzenDataGridColumn TItem="Insumo" Property="Codigo" Title="Código" Width="100px" />
                    <RadzenDataGridColumn TItem="Insumo" Property="StockReal" Title="Cantidad" Width="100px" />
                    <RadzenDataGridColumn TItem="Insumo" Property="" Title="" Filterable="false" Width="30px">
                        <Template Context="data">
                            <button class="btn" title="Editar insumo" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Insumo" Property="" Title="" Filterable="false" Width="30px">
                        <Template Context="data">
                            <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Insumo" Property="" Title="" Filterable="false" Width="30px">
                        <Template Context="data">
                            <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>

        </RadzenTabsItem>
        <RadzenTabsItem Text="Pendiente compra">
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="4"
                            AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@oRespuestaPendienteCompra" TItem="Insumo" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="Insumo" Property="Descripcion" Title="Descripción" Width="100px" />
                    <RadzenDataGridColumn TItem="Insumo" Property="Codigo" Title="Código" Width="100px" />
                    <RadzenDataGridColumn TItem="Insumo" Property="StockReal" Title="Cantidad" Width="100px" />
                    
                    <RadzenDataGridColumn TItem="Insumo" Property="" Title="" Filterable="false" Width="30px">
                        <Template Context="data">
                            <button class="btn" title="Crear cotización" @onclick="() => addCotizacion(data.Id)"><FeatherInbox Color="blue" /></button>
                        </Template>
                    </RadzenDataGridColumn>
                    @* <RadzenDataGridColumn TItem="Insumo" Property="" Title="" Filterable="false" Width="30px">
                    <Template Context="data">
                    <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                    </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Insumo" Property="" Title="" Filterable="false" Width="30px">
                    <Template Context="data">
                    <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                    </Template>
                    </RadzenDataGridColumn>*@
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Pendiente recepción">
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="4"
                            AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@oRespuestaPendienteRecepcion" TItem="Insumo" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="Insumo" Property="Descripcion" Title="Descripción" Width="100px" />
                    <RadzenDataGridColumn TItem="Insumo" Property="Codigo" Title="Código" Width="100px" />
                    <RadzenDataGridColumn TItem="Insumo" Property="StockReal" Title="Cantidad" Width="100px" />                                      
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<List<Insumo>> oRespuesta = new();
    List<Insumo> oRespuestaPendienteCompra = new();
        List<Insumo> oRespuestaPendienteRecepcion = new();


    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    async Task gotoinfo(int id)
    {
        nav.NavigateTo($"/infoinsumo/{id}");
    }
    async Task ComeBack()
    {
        nav.NavigateTo("/compras");
    }
    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<Insumo>>>("/api/Insumo");
        oRespuesta = respuesta;
        oRespuestaPendienteCompra = respuesta.List.Where(x => x.StockReal <= x.StockMin && x.Recepcion != "Esperando recepcion").ToList();
        oRespuestaPendienteRecepcion = respuesta.List.Where(x => x.StockReal <= x.StockMin && x.Recepcion == "Esperando recepcion").ToList();
        StateHasChanged();
    }

    async void delete(int id)
    {
        await http.DeleteAsync($"/api/Insumo/{id}");
        await Get();
    }
    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    async Task add(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddInsumo.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large

            };

        var formModal = Modal.Show<AddInsumo>("Agregar insumo", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await Get();
        }
    }
    async Task addCotizacion(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Creará una cotización",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            crear(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task crear(int id)
    {
        Ordencompra orden = new();
        orden.Insumo = id;
        orden.Generada=DateTime.Now;
        orden.Estado ="Generada";
        await http.PostAsJsonAsync<Ordencompra>("/api/oc",orden);
        var a = await http.GetFromJsonAsync<Respuesta<Insumo>>($"/api/Insumo/{id}");
        a.List.Recepcion = "Esperando confirmacion";
        await http.PutAsJsonAsync<Insumo>("/api/Insumo", a.List);
        await OnInitializedAsync();
    }
}